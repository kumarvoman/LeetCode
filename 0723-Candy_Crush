set<pair<int, int>> marked;
bool isBurstPossible(vector<vector<int>>& board)
{
    int m = board.size() -1;
    int n = board[0].size() -1;
    //for rows
    for (int i = m; i >=0 ; i--)
    {
        for (int j = n-1; j >0 ; j--)
        {
            if (board[i][j - 1] != 0 && (board[i][j - 1] == board[i][j]) && (board[i][j + 1] == board[i][j]))
            {
                marked.insert({ i, j - 1 });
                marked.insert({ i, j });
                marked.insert({ i, j + 1 });
            }
        }
    }

    //for cols
    for (int i = m; i>=2; i--)
    {
        for (int j = n; j >= 0; j--)
        {
            if (board[i][j] != 0 && (board[i][j] == board[i-1][j]) && (board[i-2][j] == board[i][j]))
            {
                marked.insert({ i, j });
                marked.insert({ i - 1, j });
                marked.insert({ i - 2, j });
            }
        }
    }

    if (marked.size() > 0)
        return true;
    return false;
}

void burst(vector<vector<int>>& board)
{
    for(auto x: marked)
    {
        board[x.first][x.second] = -1;
    }
}

//check this logic
void stablizeIt(vector<vector<int>>& board)
{
    //now do column wise traversal, wherever you find a -1, swap its value with next row same column index
    for (auto x = marked.rbegin(); x!= marked.rend();++x)
    {
        int i = x->first, j = x->second, n = board[i].size();
        int cc = i;
        while (i > 0)
        {
            if (board[i-1][j] != -1 && board[i - 1][j] != 0 && (board[cc][j] == -1 || board[cc][j] == 0))
            {
                swap(board[cc][j], board[i-1][j]);
                board[i - 1][j] = 0;
                cc--;
            }
            i--;
        }
    }

    //for top most -1, we will repalce with 0
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[i].size(); j++)
        {
            if (board[i][j] == -1)
                board[i][j] = 0;
        }
    }
    marked.clear();
}

vector<vector<int>> candyCrush(vector<vector<int>>& board)
{
    while (false != isBurstPossible(board))
    {
        burst(board);
        stablizeIt(board);
    }
    return board;
}
