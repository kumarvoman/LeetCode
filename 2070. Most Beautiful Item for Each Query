/*
You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.
You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.
Return an array answer of the same length as queries where answer[j] is the answer to the jth query.
    
*/
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        int n = static_cast<int>(items.size());
        sort(items.begin(), items.end());
        int m = static_cast<int>(queries.size());
        vector<pair<int, int>> qs(m);
        
        for (int i = 0; i < m; ++i) 
        {
            qs[i] = {queries[i], i};
        }
        
        sort(qs.begin(), qs.end());
        vector<int> results(m);
        int maxVal = 0;
        for (int i = 0, j = 0; i < m; ++i) 
        {
            while (j < n && items[j][0] <= qs[i].first) 
            {
                maxVal = max(maxVal, items[j++][1]);
            }
            results[qs[i].second] = maxVal;
        }
        return results;
    }
