/*
Given the roots of two binary trees p and q, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false


Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false
*/

//Recursive way - 
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p == NULL || q == NULL) 
                return (p == q);
        return (p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
    }
};

//with help of inorder & prteorder
class Solution {
public:
     void inOrder(TreeNode *node, vector<int>& in){
        if(!node)
            in.push_back(-1);
        else{
            inOrder(node->left, in);
            in.push_back(node ->val);
            inOrder(node->right, in);
        }
    }
    void preOrder(TreeNode *node, vector<int>& pre){
        if(!node)
            pre.push_back(-1);
        else{
            pre.push_back(node ->val);
            inOrder(node->left, pre);
            inOrder(node->right, pre);
        }
    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        vector<int> pIn, qIn, pPre, qPre;
        inOrder(p, pIn);
        inOrder(q, qIn);
        preOrder(p, pPre);
        preOrder(q, qPre);
        if((pIn == qIn ) && (pPre==qPre))
            return true;
        return false;
    }
};
