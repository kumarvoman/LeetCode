/*
You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.
Return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.
Note:
The frequency of a letter x is the number of times it occurs in the string.
You must remove exactly one letter and cannot chose to do nothing.
 
Example 1:
Input: word = "abcc"
Output: true
Explanation: Select index 3 and delete it: word becomes "abc" and each character has a frequency of 1.

Example 2:
Input: word = "aazz"
Output: false
Explanation: We must delete a character, so either the frequency of "a" is 1 and the frequency of "z" is 2, or vice versa. It is impossible to make all present letters have equal frequency.


Intuition
Intuition is based on brute force only where we wanted to compare each character frequency with other character ferquencies, its just that instead of looping for word.length() and making it run over O(n) times I'm utilising the given info of all small alphabets and putting them on an int array of size 26.

Approach
Capture the frequencies of each character in vec array.
check for each character in the vec, if(vec[i] == 0) that means that character is absent in given word and we don't have to check that.
reduce the current char frequency by 1.
again check for each character in the vec.
here's the catch - if the curr element frequency is reduced to zero coz we wanted to delete that, then take the first character's frequency which is not zero and compare the array against that value.
if all array elements have same value then return true, else correct the value and repeat the process.
Complexity
Time complexity:
O(26*26) - O(1)

Space complexity:
O(26) - O(1)

Code
*/
class Solution {
public:
    bool equalFrequency(string word) {
        vector<int> vec(26, 0);
        for(auto x: word)
            vec[x-'a']++;

        for(int i=0;i<26;i++)
        {
            if(vec[i] == 0)
                continue;
            
            vec[i]--;
            int curr = vec[i];
            bool bAllSame = true;

            for(int j=0;j<26;j++)
            {
                if(vec[j] == 0)
                    continue;

                if (curr == 0)
                {
                    curr = vec[j];
                }
                if(vec[j] != curr)
                {
                    bAllSame = false;
                    break;
                }
            }

            if(bAllSame)
                return true;
            vec[i]++;
        }
        
        return false;
    }
};

