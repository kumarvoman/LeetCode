/*
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.
Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
*/

class Solution {
public:
    int maxPoints(vector<vector<int>>& pt) {
        
        //calculate slope for each point with respect to every other point and store it in map.
        //the slope which has heightest no of repeatation will be the answer.

        int ans=1; 
        int n=pt.size();
        for(int i=0; i<n-1; i++)
        {
            map<double,int> mp;
            for(int j=i+1; j<n; j++)
            {
                double x = (double)(pt[j][1]-pt[i][1])/(double)(pt[j][0]-pt[i][0]);
                if(pt[j][1]-pt[i][1]<0  && (pt[j][0]-pt[i][0]) ==0 )
                    mp[abs(x)]++; 
                else
                    mp[x]++;
            }

            int temp = 0;
            for(auto it:mp)
                temp = max(temp, it.second+1);    // +1 for the current point(point itself)
            ans = max(temp, ans);
        }
        return ans;
    }
};
