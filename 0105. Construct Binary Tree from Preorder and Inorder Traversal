/*
105. Construct Binary Tree from Preorder and Inorder Traversal

Given two integer arrays preorder and inorder where preorder is the preorder traversal
of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]
*/

int preInd=0;
map<int, int> hash;
TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder)
{
    for(int i=0;i<inorder.size();i++)
        hash[inorder[i]] = i;

    return createTree(preorder,inorder,0,inorder.size() - 1);
}

TreeNode* createTree(vector<int>& preorder, vector<int>& inorder,int start, int end)
{
    if(start > end)
        return NULL;

    TreeNode* node=new TreeNode(preorder[preInd++]);
    int pos = hash[node->val];
    node->left =createTree(preorder, inorder,start,pos-1);
    node->right =createTree(preorder, inorder, pos+1,end);
    return node;
}
