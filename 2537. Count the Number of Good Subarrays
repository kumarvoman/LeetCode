/*
Given an integer array nums and an integer k, return the number of good subarrays of nums.
A subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.

Example 2:
Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.
*/

class Solution {
    typedef long long ll;
public:
    long long countGood(vector<int>& nums, int k) {
        ll i = 0, ans = 0, count = 0, n = nums.size();
        unordered_map<ll, ll> m;
        
        for(int j=0; j<n; j++) 
        {
            m[nums[j]]++;
            if(m[nums[j]] > 1) 
                count += m[nums[j]]  - 1;
            
            while(i <= j && count >= k) 
            {
                ans += n - j;
                m[nums[i]]--;
                if(m[nums[i]] >= 1) 
                    count -= m[nums[i]];
                i++;
            } 
        }
        return ans;
    }
};
